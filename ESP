local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local tweenService = game:GetService("TweenService")

-- Create a persistent highlight
local highlight = Instance.new("Highlight")
highlight.Parent = player -- Parent it to the player so it can persist
highlight.FillColor = Color3.fromRGB(255, 255, 255) -- Default color

-- Create a BillboardGui for displaying the username and stats
local billboardGui = Instance.new("BillboardGui")
billboardGui.Size = UDim2.new(1, 0, 1, 0) -- Adjust size as needed
billboardGui.Adornee = player.Character or player.CharacterAdded:Wait() -- Adornee will be the player's character
billboardGui.StudsOffset = Vector3.new(0, 3, 0) -- Offset above the player's head
billboardGui.Parent = player.Character:WaitForChild("Head") -- Attach to the player's head

-- Create a TextLabel to show the username and stats
local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(1, 0, 1, 0) -- Fill the BillboardGui
textLabel.BackgroundTransparency = 1 -- Make background transparent
textLabel.TextColor3 = highlight.FillColor -- Match text color to highlight color
textLabel.TextScaled = true -- Scale text to fit
textLabel.Parent = billboardGui

-- Color ranges for stats
local colorRanges = {
    {max = 1e6, color = Color3.fromRGB(105, 105, 105)}, -- Dark Gray for <1M
    {max = 5e6, color = Color3.fromRGB(0, 100, 0)},     -- Dark Green for 1M - 5M
    {max = 30e6, color = Color3.fromRGB(144, 238, 144)},-- Light Green for 5M - 30M
    {max = 120e6, color = Color3.fromRGB(0, 0, 128)},   -- Navy Blue for 30M - 120M
    {max = 1e9, color = Color3.fromRGB(0, 0, 255)},     -- Blue for 120M - 1B
    {max = 5e9, color = Color3.fromRGB(173, 216, 230)}, -- Light Blue for 1B - 5B
    {max = 30e9, color = Color3.fromRGB(0, 255, 255)},  -- Cyan for 5B - 30B
    {max = 1e11, color = Color3.fromRGB(255, 215, 0)},  -- Gold for 30B - 100B
    {max = 1e12, color = Color3.fromRGB(255, 255, 0)},  -- Yellow for 100B - 1T
    {max = 1e13, color = Color3.fromRGB(220, 20, 60)},  -- Crimson for 1T - 10T
    {max = 1e14, color = Color3.fromRGB(255, 0, 0)},    -- Red for 10T - 100T
}

local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true) -- Faster looping tween info

local function smoothColorCycle()
    local cycleColors = {
        Color3.fromRGB(105, 105, 105),   -- Dark Gray
        Color3.fromRGB(0, 100, 0),       -- Dark Green
        Color3.fromRGB(144, 238, 144),   -- Light Green
        Color3.fromRGB(0, 0, 128),       -- Navy Blue
        Color3.fromRGB(0, 0, 255),       -- Blue
        Color3.fromRGB(173, 216, 230),   -- Light Blue
        Color3.fromRGB(0, 255, 255),     -- Cyan
        Color3.fromRGB(255, 215, 0),     -- Gold
        Color3.fromRGB(255, 255, 0),     -- Yellow
        Color3.fromRGB(220, 20, 60),     -- Crimson
        Color3.fromRGB(255, 0, 0)        -- Red
    }
    
    local currentIndex = 1
    
    while true do
        local nextIndex = (currentIndex % #cycleColors) + 1
        local tween = tweenService:Create(highlight, tweenInfo, {FillColor = cycleColors[nextIndex]})
        tween:Play()
        textLabel.TextColor3 = cycleColors[nextIndex] -- Match text color to highlight color
        currentIndex = nextIndex
        wait(0.5) -- Faster transition speed
    end
end

local function updateHighlight(statValue, rebirthCount)
    -- Check if the player is one of the specified ones
    local specialPlayers = { "whowhatwhen1230", "Steve72009", "Pserson2" }
    local isSpecialPlayer = false

    for _, specialPlayer in ipairs(specialPlayers) do
        if player.Name == specialPlayer then
            isSpecialPlayer = true
            break
        end
    end

    -- If the player is special or stat >= 100T, start smooth color cycling
    if isSpecialPlayer or statValue >= 1e14 then
        smoothColorCycle()
    else
        -- Choose a static color based on statValue
        for _, range in ipairs(colorRanges) do
            if statValue < range.max then
                highlight.FillColor = range.color
                textLabel.TextColor3 = range.color -- Update text color to match highlight
                highlight.Adornee = player.Character -- Update Adornee to the character
                break
            end
        end
    end

    -- Update the text label to show the username, stats, and rebirth count
    textLabel.Text = string.format("%s | %d | Rebirths: %d", player.DisplayName, statValue, rebirthCount)
end

local function format_number(number)
    local suffixes = {"", "K", "M", "B", "T", "QD"}
    local suffix_index = 1
    while math.abs(number) >= 1000 and suffix_index < #suffixes do
        number = number / 1000.0
        suffix_index = suffix_index + 1
    end
    return string.format("%.2f%s", number, suffixes[suffix_index])
end

-- Function to fetch and update the player's stats
local function updatePlayerStats()
    local playerStats = replicatedStorage:FindFirstChild("Datas"):FindFirstChild(tostring(player.UserId))
    if playerStats then
        local strengthStat = playerStats:FindFirstChild("Strength")
        local rebirthStat = playerStats:FindFirstChild("Rebirths") -- Assume there is a Rebirths stat
        local statValue = strengthStat and strengthStat.Value or 0
        local rebirthCount = rebirthStat and rebirthStat.Value or 0
        updateHighlight(statValue, rebirthCount)
    end
end

-- Monitor the player's respawn and reapply the highlight after death
player.CharacterAdded:Connect(function(character)
    wait(0.1)  -- Wait for the character to fully load
    highlight.Adornee = character -- Apply the highlight to the new character
    billboardGui.Adornee = character:WaitForChild("Head") -- Update the BillboardGui's Adornee
end)

-- Apply highlight and BillboardGui to the current character if it exists
if player.Character then
    highlight.Adornee = player.Character
    billboardGui.Adornee = player.Character:WaitForChild("Head")
end

-- Run the update loop every 0.1 seconds
while true do
    updatePlayerStats()
    wait(0.1)
end
