local Players = game:GetService("Players")
local replicatedStorage = game:GetService("ReplicatedStorage")
local tweenService = game:GetService("TweenService")

-- Color ranges for stats
local colorRanges = {
    {max = 1e6, color = Color3.fromRGB(105, 105, 105)}, -- Dark Gray for <1M
    {max = 5e6, color = Color3.fromRGB(0, 100, 0)},     -- Dark Green for 1M - 5M
    {max = 30e6, color = Color3.fromRGB(144, 238, 144)},-- Light Green for 5M - 30M
    {max = 120e6, color = Color3.fromRGB(0, 0, 128)},   -- Navy Blue for 30M - 120M
    {max = 1e9, color = Color3.fromRGB(0, 0, 255)},     -- Blue for 120M - 1B
    {max = 5e9, color = Color3.fromRGB(173, 216, 230)}, -- Light Blue for 1B - 5B
    {max = 30e9, color = Color3.fromRGB(0, 255, 255)},  -- Cyan for 5B - 30B
    {max = 1e11, color = Color3.fromRGB(255, 215, 0)},  -- Gold for 30B - 100B
    {max = 1e12, color = Color3.fromRGB(255, 255, 0)},  -- Yellow for 100B - 1T
    {max = 1e13, color = Color3.fromRGB(220, 20, 60)},  -- Crimson for 1T - 10T
    {max = 1e14, color = Color3.fromRGB(255, 0, 0)},    -- Red for 10T - 100T
}

local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true)

local function smoothColorCycle(highlight)
    local cycleColors = {
        Color3.fromRGB(105, 105, 105),
        Color3.fromRGB(0, 100, 0),
        Color3.fromRGB(144, 238, 144),
        Color3.fromRGB(0, 0, 128),
        Color3.fromRGB(0, 0, 255),
        Color3.fromRGB(173, 216, 230),
        Color3.fromRGB(0, 255, 255),
        Color3.fromRGB(255, 215, 0),
        Color3.fromRGB(255, 255, 0),
        Color3.fromRGB(220, 20, 60),
        Color3.fromRGB(255, 0, 0)
    }
    
    local currentIndex = 1
    
    while true do
        local nextIndex = (currentIndex % #cycleColors) + 1
        local tween = tweenService:Create(highlight, tweenInfo, {FillColor = cycleColors[nextIndex]})
        tween:Play()
        currentIndex = nextIndex
        wait(0.5)
    end
end

local function updateHighlight(highlight, statValue)
    local specialPlayers = { "whowhatwhen1230", "Steve72009", "Pserson2" }
    local isSpecialPlayer = false

    for _, specialPlayer in ipairs(specialPlayers) do
        if Players.LocalPlayer.Name == specialPlayer then
            isSpecialPlayer = true
            break
        end
    end

    if isSpecialPlayer or statValue >= 1e14 then
        smoothColorCycle(highlight)
    else
        for _, range in ipairs(colorRanges) do
            if statValue < range.max then
                highlight.FillColor = range.color
                break
            end
        end
    end
end

local function updatePlayerStats(player, highlight)
    local playerStats = replicatedStorage:FindFirstChild("Datas"):FindFirstChild(tostring(player.UserId))
    if playerStats then
        local strengthStat = playerStats:FindFirstChild("Strength")
        local statValue = strengthStat and strengthStat.Value or 0
        highlight.Adornee = player.Character -- Set the highlight to the player's character
        updateHighlight(highlight, statValue)
    end
end

local function createHighlightForPlayer(player)
    local highlight = Instance.new("Highlight")
    highlight.Parent = player -- Parent it to the player so it can persist
    highlight.FillColor = Color3.fromRGB(255, 255, 255) -- Default color

    player.CharacterAdded:Connect(function(character)
        wait(0.1)  -- Wait for the character to fully load
        highlight.Adornee = character -- Apply the highlight to the new character
    end)

    if player.Character then
        highlight.Adornee = player.Character
    end

    -- Update player stats in a loop
    while true do
        updatePlayerStats(player, highlight)
        wait(0.1)
    end
end

-- Create highlights for all existing players
for _, player in ipairs(Players:GetPlayers()) do
    createHighlightForPlayer(player)
end

-- Monitor for new players joining
Players.PlayerAdded:Connect(function(newPlayer)
    createHighlightForPlayer(newPlayer)
end)
