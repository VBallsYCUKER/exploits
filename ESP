local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local tweenService = game:GetService("TweenService")

-- Create a persistent highlight
local highlight = Instance.new("Highlight")
highlight.Parent = player -- Parent it to the player so it can persist
highlight.FillColor = Color3.fromRGB(255, 255, 255) -- Default fill color

-- Create an outline for the player
local outline = Instance.new("Highlight")
outline.Parent = player -- Parent it to the player for persistence
outline.OutlineColor = Color3.fromRGB(0, 0, 0) -- Default outline color
outline.Thickness = 0.1 -- Set thickness for the outline

-- Color ranges for stats
local colorRanges = {
    {max = 1e6, color = Color3.fromRGB(105, 105, 105)}, -- Dark Gray for <1M
    {max = 5e6, color = Color3.fromRGB(0, 100, 0)},     -- Dark Green for 1M - 5M
    {max = 30e6, color = Color3.fromRGB(144, 238, 144)},-- Light Green for 5M - 30M
    {max = 120e6, color = Color3.fromRGB(0, 0, 128)},   -- Navy Blue for 30M - 120M
    {max = 1e9, color = Color3.fromRGB(0, 0, 255)},     -- Blue for 120M - 1B
    {max = 5e9, color = Color3.fromRGB(173, 216, 230)}, -- Light Blue for 1B - 5B
    {max = 30e9, color = Color3.fromRGB(0, 255, 255)},  -- Cyan for 5B - 30B
    {max = 1e11, color = Color3.fromRGB(255, 215, 0)},  -- Gold for 30B - 100B
    {max = 1e12, color = Color3.fromRGB(255, 255, 0)},  -- Yellow for 100B - 1T
    {max = 1e13, color = Color3.fromRGB(220, 20, 60)},  -- Crimson for 1T - 10T
    {max = 1e14, color = Color3.fromRGB(255, 0, 0)},    -- Red for 10T - 100T
}

-- Outline color ranges
local outlineColorRanges = {
    {max = 1e6, color = Color3.fromRGB(0, 0, 0)},       -- Black for <1M
    {max = 5e6, color = Color3.fromRGB(105, 105, 105)},  -- Dark Gray for 1M - 5M
    {max = 1e8, color = Color3.fromRGB(124, 252, 0)},    -- Grass Green for 5M - 100M
    {max = 1e10, color = Color3.fromRGB(255, 165, 0)},   -- Orange for 100M - 10B
    {max = 1e11, color = Color3.fromRGB(255, 255, 0)},   -- Yellow for 10B - 100B
    {max = 1e12, color = Color3.fromRGB(255, 215, 0)},   -- Gold for 100B - 1T
    {max = 5e13, color = Color3.fromRGB(255, 0, 0)},     -- Red for 1T - 50T
    {max = 5e14, color = Color3.fromRGB(139, 0, 0)},     -- Blood Red for 50T - 500T
    {max = math.huge, color = Color3.fromRGB(255, 255, 255)}, -- White for 500T+
}

local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true) -- Looping tween info

local function smoothColorCycle()
    local cycleColors = {
        Color3.fromRGB(105, 105, 105),   -- Dark Gray
        Color3.fromRGB(0, 100, 0),       -- Dark Green
        Color3.fromRGB(144, 238, 144),   -- Light Green
        Color3.fromRGB(0, 0, 128),       -- Navy Blue
        Color3.fromRGB(0, 0, 255),       -- Blue
        Color3.fromRGB(173, 216, 230),   -- Light Blue
        Color3.fromRGB(0, 255, 255),     -- Cyan
        Color3.fromRGB(255, 215, 0),     -- Gold
        Color3.fromRGB(255, 255, 0),     -- Yellow
        Color3.fromRGB(220, 20, 60),     -- Crimson
        Color3.fromRGB(255, 0, 0)        -- Red
    }
    
    local currentIndex = 1
    
    while true do
        local nextIndex = (currentIndex % #cycleColors) + 1
        local tween = tweenService:Create(highlight, tweenInfo, {FillColor = cycleColors[nextIndex]})
        tween:Play()
        currentIndex = nextIndex
        wait(1) -- Adjust this to control the smoothness of the transition
    end
end

local function updateHighlight(statValue)
    -- Update highlight fill color based on stat value
    if statValue >= 1e14 then
        smoothColorCycle()
    else
        for _, range in ipairs(colorRanges) do
            if statValue < range.max then
                highlight.FillColor = range.color
                highlight.Adornee = player.Character -- Update Adornee to the character
                break
            end
        end
    end

    -- Update outline color based on stat value
    for _, range in ipairs(outlineColorRanges) do
        if statValue < range.max then
            outline.OutlineColor = range.color
            break
        end
    end
end

local function format_number(number)
    local suffixes = {"", "K", "M", "B", "T", "QD"}
    local suffix_index = 1
    while math.abs(number) >= 1000 and suffix_index < #suffixes do
        number = number / 1000.0
        suffix_index = suffix_index + 1
    end
    return string.format("%.2f%s", number, suffixes[suffix_index])
end

-- Function to fetch and update the player's stats
local function updatePlayerStats()
    local playerStats = replicatedStorage:FindFirstChild("Datas"):FindFirstChild(tostring(player.UserId))
    if playerStats then
        local strengthStat = playerStats:FindFirstChild("Strength")
        local statValue = strengthStat and strengthStat.Value or 0
        updateHighlight(statValue)
    end
end

-- Monitor the player's respawn and reapply the highlight after death
player.CharacterAdded:Connect(function(character)
    wait(0.1)  -- Wait for the character to fully load
    highlight.Adornee = character -- Apply the highlight to the new character
    outline.Adornee = character -- Apply the outline to the new character
end)

-- Apply highlight to the current character if it exists
if player.Character then
    highlight.Adornee = player.Character
    outline.Adornee = player.Character
end

-- Run the update loop every 0.1 seconds
while true do
    updatePlayerStats()
    wait(0.1)
end
