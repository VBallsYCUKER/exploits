local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local tweenService = game:GetService("TweenService")

-- Create a persistent highlight
local highlight = Instance.new("Highlight")
highlight.Parent = player -- Parent it to the player so it can persist
highlight.FillColor = Color3.fromRGB(255, 255, 255) -- Default color

-- Color ranges for stats
local colorRanges = {
    {max = 1e6, color = Color3.fromRGB(105, 105, 105)}, -- Dark Gray for <1M
    {max = 5e6, color = Color3.fromRGB(0, 100, 0)},     -- Dark Green for 1M - 5M
    {max = 30e6, color = Color3.fromRGB(144, 238, 144)},-- Light Green for 5M - 30M
    {max = 120e6, color = Color3.fromRGB(0, 0, 128)},   -- Navy Blue for 30M - 120M
    {max = 1e9, color = Color3.fromRGB(0, 0, 255)},     -- Blue for 120M - 1B
    {max = 5e9, color = Color3.fromRGB(173, 216, 230)}, -- Light Blue for 1B - 5B
    {max = 30e9, color = Color3.fromRGB(0, 255, 255)},  -- Cyan for 5B - 30B
    {max = 1e11, color = Color3.fromRGB(255, 215, 0)},  -- Gold for 30B - 100B
    {max = 1e12, color = Color3.fromRGB(255, 255, 0)},  -- Yellow for 100B - 1T
    {max = 1e13, color = Color3.fromRGB(220, 20, 60)},  -- Crimson for 1T - 10T
    {max = 1e14, color = Color3.fromRGB(255, 0, 0)},    -- Red for 10T - 100T
}

local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true) -- Faster looping tween info

local function smoothColorCycle()
    local cycleColors = {
        Color3.fromRGB(105, 105, 105),   -- Dark Gray
        Color3.fromRGB(0, 100, 0),       -- Dark Green
        Color3.fromRGB(144, 238, 144),   -- Light Green
        Color3.fromRGB(0, 0, 128),       -- Navy Blue
        Color3.fromRGB(0, 0, 255),       -- Blue
        Color3.fromRGB(173, 216, 230),   -- Light Blue
        Color3.fromRGB(0, 255, 255),     -- Cyan
        Color3.fromRGB(255, 215, 0),     -- Gold
        Color3.fromRGB(255, 255, 0),     -- Yellow
        Color3.fromRGB(220, 20, 60),     -- Crimson
        Color3.fromRGB(255, 0, 0)        -- Red
    }
    
    local currentIndex = 1
    
    while true do
        local nextIndex = (currentIndex % #cycleColors) + 1
        local tween = tweenService:Create(highlight, tweenInfo, {FillColor = cycleColors[nextIndex]})
        tween:Play()
        usernameLabel.TextColor3 = cycleColors[nextIndex] -- Change the text color with the highlight color
        currentIndex = nextIndex
        wait(0.5) -- Faster transition speed
    end
end

local function updateHighlight(statValue)
    -- Check if the player is one of the specified ones
    local specialPlayers = { "roblox" }
    local isSpecialPlayer = false

    for _, specialPlayer in ipairs(specialPlayers) do
        if player.Name == specialPlayer then
            isSpecialPlayer = true
            break
        end
    end

    -- If the player is special or stat >= 100T, start smooth color cycling
    if isSpecialPlayer or statValue >= 1e14 then
        smoothColorCycle()
    else
        -- Choose a static color based on statValue
        for _, range in ipairs(colorRanges) do
            if statValue < range.max then
                highlight.FillColor = range.color
                highlight.Adornee = player.Character -- Update Adornee to the character
                usernameLabel.TextColor3 = range.color -- Change the text color to match the highlight color
                break
            end
        end
    end
end

local function format_number(number)
    local suffixes = {"", "K", "M", "B", "T", "QD"}
    local suffix_index = 1
    while math.abs(number) >= 1000 and suffix_index < #suffixes do
        number = number / 1000.0
        suffix_index = suffix_index + 1
    end
    return string.format("%.2f%s", number, suffixes[suffix_index])
end

-- Function to create or update the GUI
local function createGUI(character)
    -- Wait for the character's Head to be available
    local head = character:WaitForChild("Head")

    -- Create a BillboardGui for the display name and stats
    local billboardGui = head:FindFirstChild("BillboardGui") or Instance.new("BillboardGui")
    billboardGui.Parent = head
    billboardGui.Size = UDim2.new(0, 200, 0, 50) -- Size of the GUI
    billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Position above the head
    billboardGui.Adornee = head -- Set the object it will be attached to
    billboardGui.AlwaysOnTop = true -- Keep it always on top

    -- Create or reuse the TextLabel
    local usernameLabel = billboardGui:FindFirstChild("UsernameLabel") or Instance.new("TextLabel")
    usernameLabel.Name = "UsernameLabel" -- Set name for easy reference
    usernameLabel.Parent = billboardGui
    usernameLabel.Size = UDim2.new(1, 0, 1, 0) -- Fill the BillboardGui
    usernameLabel.BackgroundTransparency = 1 -- Make background transparent
    usernameLabel.TextColor3 = highlight.FillColor -- Match the highlight color
    usernameLabel.TextScaled = false -- Disable scaling to set a fixed size
    usernameLabel.TextSize = 20 -- Set the desired text size (adjust as needed)
    usernameLabel.TextWrapped = false -- Ensure the text stays on one line

    -- Fetch player stats from ReplicatedStorage
    local playerStats = replicatedStorage:FindFirstChild("Datas"):FindFirstChild(tostring(player.UserId))
    local ownerTag = ""
    local totalStats = math.huge -- Start with the highest possible value
    local rebirths = 0 -- Default rebirths

    if playerStats then
        -- Fetch rebirth data
        rebirths = playerStats:FindFirstChild("Rebirth") and playerStats.Rebirth.Value or 0

        -- Fetch the various stats
        local strengthStat = playerStats:FindFirstChild("Strength") and playerStats.Strength.Value or math.huge
        local defenceStat = playerStats:FindFirstChild("Defense") and playerStats.Defense.Value or math.huge
        local energyStat = playerStats:FindFirstChild("Energy") and playerStats.Energy.Value or math.huge
        local speedStat = playerStats:FindFirstChild("Speed") and playerStats.Speed.Value or math.huge

        -- Calculate the lowest stat
        totalStats = math.min(strengthStat, defenceStat, energyStat, speedStat)

        -- Add "Owner" tag if the player is one of the specified usernames
        if player.Name == "Steve72009" or player.Name == "Pserson2" or player.Name == "whowhatwhen1230" or player.Name == "Reekennedy1057" then
            ownerTag = " || Script Dev"
            usernameLabel.Font = Enum.Font.SpecialElite -- Change font to Special Elite
        else
            usernameLabel.Font = Enum.Font.Cartoon -- Default font for other players
        end

        -- Format the display name, total stats, rebirths
        usernameLabel.Text = string.format("%s || %s, %d %s", 
            player.DisplayName, 
            format_number(totalStats), 
            rebirths, 
            ownerTag)

    else
        usernameLabel.Text = player.DisplayName -- Fallback if stats not found
    end

    usernameLabel.TextStrokeTransparency = .01
end

-- Function to fetch and update the player's stats
local function updatePlayerStats()
    local playerStats = replicatedStorage:FindFirstChild("Datas"):FindFirstChild(tostring(player.UserId))
    if playerStats then
        -- Fetch stats again
        local strengthStat = playerStats:FindFirstChild("Strength") and playerStats.Strength.Value or math.huge
        local defenceStat = playerStats:FindFirstChild("Defense") and playerStats.Defense.Value or math.huge
        local energyStat = playerStats:FindFirstChild("Energy") and playerStats.Energy.Value or math.huge
        local speedStat = playerStats:FindFirstChild("Speed") and playerStats.Speed.Value or math.huge

        -- Calculate the lowest stat
        local totalStats = math.min(strengthStat, defenceStat, energyStat, speedStat)

        -- Update highlight and username label
        updateHighlight(totalStats)
    end
end

-- Connect to character appearance
player.CharacterAdded:Connect(function(character)
    createGUI(character)

    -- Update the player's stats when the character is added or respawns
    character:WaitForChild("Head")
    updatePlayerStats()

    -- Continuously update stats every few seconds (adjust interval as necessary)
    while wait(5) do
        updatePlayerStats()
    end
end)

-- Handle the player's current character
if player.Character then
    createGUI(player.Character)
end

-- Update stats when the player joins the game
updatePlayerStats()
